# Coleção de queries SQL utilizadas.
queries:

  # Insere um log de requisição com método, endpoint, status HTTP, IP e user-agent
  insert_request_log: |
    INSERT INTO request_logs (method, endpoint, status_code, ip_address, user_agent)
    VALUES ($1, $2, $3, $4, $5);

  # Recupera usuário pelo e-mail fornecido
  select_user_by_email: |
    SELECT user_id, name, email, password_hash, email_verified
    FROM users
    WHERE email = $1;

  # Seleciona registro de verificação de e-mail válido por token
  select_user_by_token: |
    SELECT user_id, email 
    FROM user_email_verified_keys
    WHERE token = $1
      AND expires_at > CURRENT_TIMESTAMP
    LIMIT 1;

  # Exclui token de verificação de e-mail após uso
  delete_token_email_by_token: |
    DELETE FROM user_email_verified_keys 
    WHERE token = $1;

  delete_token_email_by_email: |
    DELETE FROM user_email_verified_keys 
    WHERE email = $1;

  # Seleciona registro de redefinição de senha válido por token
  select_user_by_token_resetpass: |
    SELECT user_id, email 
    FROM user_reset_password_keys
    WHERE token = $1
      AND expires_at > CURRENT_TIMESTAMP
    LIMIT 1;

  # Atualiza senha do usuário pelo e-mail e retorna o ID do usuário
  update_password_by_email: |
    UPDATE users
    SET password_hash = $2,
        updated_at = CURRENT_TIMESTAMP
    WHERE email = $1
    RETURNING user_id;

  # Marca usuário como verificado por e-mail e retorna o ID
  update_verified_user_by_email: |
    UPDATE users
    SET email_verified = TRUE,
        updated_at = CURRENT_TIMESTAMP
    WHERE email = $1
    RETURNING user_id;

  # Insere novo usuário e retorna dados essenciais
  insert_user: |
    INSERT INTO users (name, email, password_hash) 
    VALUES ($1, $2, $3) 
    RETURNING user_id, name, email;

  insert_user_log_register: |
    INSERT INTO user_logs (user_id, action) 
    VALUES ($1, 'REGISTER');

  insert_user_log_login: |
    INSERT INTO user_logs (user_id, action) 
    VALUES ($1, 'LOGIN');

  insert_user_log_reset_password: |
    INSERT INTO user_logs (user_id, action) 
    VALUES ($1, 'RESET PASSWORD');

  insert_user_log_email_confirm: |
    INSERT INTO user_logs (user_id, action) 
    VALUES ($1, 'CONFIRMED EMAIL');

  insert_user_reset_password_keys: |
    INSERT INTO user_reset_password_keys (user_id, email, token, expires_at)
    VALUES ($1, $2, $3, $4)
    RETURNING *;

  delete_user_reset_password_keys: |
    DELETE FROM user_reset_password_keys 
    WHERE user_id = $1;

  insert_user_email_confirm_keys: |
    INSERT INTO user_email_verified_keys (user_id, email, token, expires_at)
    VALUES ($1, $2, $3, $4)
    RETURNING *;

  select_user_reset_password_keys_by_token: |
    SELECT t.token, u.user_id, u.email, u.name, t.expires_at
    FROM user_reset_password_keys t
    LEFT JOIN users u ON t.user_id = u.user_id AND u.expired_at IS NULL
    WHERE t.token = $1;

  select_invite_by_token: |
    SELECT t.token, t.group_id, g.name AS group_name, u.user_id, u.email, u.name AS user_name, t.expires_at
    FROM user_group_invite_keys t
    LEFT JOIN users u ON t.user_id = u.user_id
    LEFT JOIN groups g ON t.group_id = g.group_id AND u.expired_at IS NULL
    WHERE t.token = $1;

  insert_invite_token: |
    INSERT INTO user_group_invite_keys (user_id, group_id, email, token, expires_at)
    VALUES ($1, $2, $3, $4, $5)
    RETURNING *;

  delete_invite_token_by_user_token: |
    DELETE FROM user_group_invite_keys
    WHERE token = $1;

  select_groups_by_user_id: |
    SELECT * FROM vw_user_groups
    WHERE user_id = $1;

  select_members_by_group_id: |
    SELECT * FROM vw_user_groups
    WHERE group_id = $1;

  select_group_by_id: |
    SELECT group_id, user_admin_id, group_name, description, category_id, category_name
    FROM vw_groups
    WHERE group_id = $1
    LIMIT 1;

  select_list_by_group_id: |
    SELECT * FROM vw_lists
    WHERE group_id = $1;

  select_groups_categories: |
    SELECT groups_category_id AS id, name
    FROM groups_category;

  insert_group: |
    INSERT INTO groups (name, description, category_id, user_admin_id) 
    VALUES ($1, $2, $3, $4) 
    RETURNING group_id;

  update_group: |
    UPDATE groups 
    SET name = $1, description = $2, category_id = $3, updated_at = CURRENT_TIMESTAMP
    WHERE group_id = $4;

  expire_group: |
    UPDATE groups
    SET expired_at = CURRENT_TIMESTAMP 
    WHERE group_id = $1;

  insert_user_groups: |
    INSERT INTO group_users (user_id, group_id, verified)
    VALUES ($1, $2, $3);

  expire_user_groups: |
    DELETE FROM group_users
    WHERE group_id = $1;

  expire_user_groups_member: |
    DELETE FROM group_users
    WHERE user_id = $1 AND group_id = $2;

  select_user_group_member: |
    SELECT * FROM group_users
    WHERE user_id = $1 AND group_id = $2 AND verified = TRUE;

  update_user_group_member: |
    UPDATE group_users 
    SET verified = TRUE
    WHERE user_id = $1 AND group_id = $2
    RETURNING *;

  delete_user_group_member: |
    DELETE FROM group_users
    WHERE user_id = $1 AND group_id = $2;

  select_user_group_member_not_verified: |
    SELECT * FROM group_users
    WHERE user_id = $1 AND group_id = $2;

  insert_products: |
    INSERT INTO products (name, description, category_id, price, quantity, added_by, list_id)
    VALUES ($1, $2, $3, $4, $5, $6, $7)
    RETURNING product_id;

  update_products_by_id: |
    UPDATE products
    SET name = $1, description = $2, category_id = $3, price = $4, quantity = $5, updated_at = CURRENT_TIMESTAMP
    WHERE product_id = $6
    RETURNING *;

  update_products_purchased: |
    UPDATE products
    SET purchased_by = $1
    WHERE product_id = $2;

  delete_products: |
    DELETE FROM products
    WHERE product_id = $1;

  select_products: |
    SELECT * FROM vw_products
    WHERE list_id = $1;

  select_total_categories_by_list_id: |
    SELECT category_id, category_name AS name, total_categoria AS total
    FROM vw_total_categoria_lista
    WHERE list_id = $1;

  select_total_user_categories_by_list_id: |
    SELECT purchased_by AS user_id, purchased_name, products_category_id AS category_id, category_name, total_categoria_usuario
    FROM vw_top3_categoria_por_usuario_lista
    WHERE list_id = $1;

  select_total_users_by_list_id: |
    SELECT purchased_by AS user_id, purchased_name, user_email, total_gasto
    FROM vw_total_gasto_por_usuario_lista
    WHERE list_id = $1;

  update_user_profile: |
    UPDATE users
    SET name = $1, bio = $2, profile_img_url = $3, updated_at = CURRENT_TIMESTAMP
    WHERE user_id = $4;

  select_invites_by_user_id: |
    SELECT * FROM vw_invites
    WHERE user_id = $1;
