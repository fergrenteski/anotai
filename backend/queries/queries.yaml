
# Coleção de queries SQL utilizadas.
queries:

   # Insere um log de requisição com método, endpoint, status HTTP, IP e user-agent
  insert_request_log: >
    INSERT INTO request_logs (method, endpoint, status_code, ip_address, user_agent)
    VALUES ($1, $2, $3, $4, $5);

  # Recupera usuário pelo e-mail fornecido
  select_user_by_email: >
    SELECT user_id, name, email, password_hash, email_verified
    FROM users
    WHERE email = $1;

  # Seleciona registro de verificação de e-mail válido por token
  select_user_by_token: >
    SELECT user_id, email 
    FROM user_email_verified_keys
    WHERE token = $1
      AND expires_at > CURRENT_TIMESTAMP
    LIMIT 1;

  # Exclui token de verificação de e-mail após uso
  delete_token_email_by_token: >
    DELETE FROM user_email_verified_keys 
    WHERE token = $1;
    
  # Exclui token de verificação de e-mail após uso
  delete_token_email_by_email: >
    DELETE FROM user_email_verified_keys 
    WHERE email = $1;

 # Seleciona registro de redefinição de senha válido por token
  select_user_by_token_resetpass: >
    SELECT user_id, email 
        FROM user_reset_password_keys
        WHERE token = $1
          AND expires_at > CURRENT_TIMESTAMP
        LIMIT 1;

  # Exclui token de verificação de senha após uso
  delete_token_reset_pass_by_token: >
    DELETE FROM user_reset_password_keys
    WHERE token = $1;

  # Atualiza senha do usuário pelo e-mail e retorna o ID do usuário
  update_password_by_email: >
    UPDATE users
       SET password_hash = $2,
           updated_at = CURRENT_TIMESTAMP
       WHERE email = $1
       RETURNING user_id;

  # Marca usuário como verificado por e-mail e retorna o ID
  update_verified_user_by_email: >
    UPDATE users
    SET email_verified = TRUE,
        updated_at = CURRENT_TIMESTAMP
    WHERE email = $1
    RETURNING user_id;

  #Insere novo usuário e retorna dados essenciais
  insert_user: >
    INSERT INTO users (name, email, password_hash) 
    VALUES ($1, $2, $3) 
    RETURNING user_id, name, email;

  # Registra ação de cadastro de usuário
  insert_user_log_register: >
    INSERT INTO user_logs (user_id, action) 
    VALUES ($1, 'REGISTER');

  # Registra ação de login de usuário
  insert_user_log_login: >
    INSERT INTO user_logs (user_id, action) 
    VALUES ($1, 'LOGIN');

  # Registra ação de redefinição de senha
  insert_user_log_reset_password: >
    INSERT INTO user_logs (user_id, action) 
    VALUES ($1, 'RESET PASSWORD');

  # Registra ação de confirmação de e-mail
  insert_user_log_email_confirm: >
    INSERT INTO user_logs (user_id, action) 
    VALUES ($1, 'CONFIRMED EMAIL');

  # Insere chave de redefinição de senha com data de expiração
  insert_user_reset_password_keys: >
    INSERT INTO user_reset_password_keys (user_id, email, token, expires_at)
    VALUES ($1, $2, $3, $4)
    RETURNING *;

   # Exclui chaves de redefinição de senha de um usuário
  delete_user_reset_password_keys: >
    DELETE FROM user_reset_password_keys 
    WHERE user_id = $1;

  # Insere chave de confirmação de e-mail com data de expiração
  insert_user_email_confirm_keys: >
    INSERT INTO user_email_verified_keys (user_id, email, token, expires_at)
    VALUES ($1, $2, $3, $4)
    RETURNING *;
  
 # Seleciona chave de redefinição de senha e dados do usuário associado
  select_user_reset_password_keys_by_token: >
    SELECT t.token, u.user_id, u.email, u.name, t.expires_at
    FROM user_reset_password_keys t
    LEFT JOIN users u 
    ON t.user_id = u.user_id
    AND u.expired_at IS NULL
    WHERE t.token = $1; 

  select_invite_by_token: >
    SELECT t.token, 
      t.group_id, 
      g.name AS group_name,
      u.user_id, u.email,
      u.name as user_name,
      t.expires_at
    FROM user_group_invite_keys t
    LEFT JOIN users u 
      ON t.user_id = u.user_id
    LEFT JOIN groups g
        ON t.group_id = g.group_id
    AND u.expired_at IS NULL
    WHERE t.token = $1;

  #Insere o token de convite de grupo
  insert_invite_token: >
      INSERT INTO user_group_invite_keys (user_id, group_id, email, token, expires_at)
      VALUES ($1, $2, $3, $4, $5)
      RETURNING *;

  # Deleta todos os tokens de usuário
  delete_invite_token_by_user_token: >
    DELETE FROM user_group_invite_keys
    WHERE token = $1

  # Deleta todos os tokens de usuário de um grupo
  delete_invite_token_by_user_id: >
    DELETE FROM user_group_invite_keys
    WHERE user_id = $1 AND group_id = $2;

 # Recupera todos os grupos associados a um usuário
  select_groups_by_user_id: >
    SELECT 
      *
      FROM vw_user_groups
    WHERE user_id = $1;

  # Recupera todos os membros de um grupo
  select_members_by_group_id: >
    SELECT 
      *
      FROM vw_user_groups
    WHERE group_id = $1;

  # Recupera detalhes de um grupo pelo ID
  select_group_by_id: >
    SELECT 
      group_id,
      user_admin_id,
      group_name,
      description,
      category_id,
      category_name
      FROM vw_groups
    WHERE group_id = $1
    LIMIT 1;

  # Recupera todas as categorias disponíveis de grupos
  select_groups_categories: >
    SELECT 
      groups_category_id as id,
      name
    FROM groups_category;

  # Recupera todas as categorias disponíveis de Lista
  select_lists_categories: >
    SELECT
      lists_category_id as id,
      name
    FROM lists_category;

  # Recupera todas as categorias disponíveis de Produtos
  select_products_categories: >
    SELECT
      products_category_id as id,
      name
    FROM products_category 

  # Cria um novo grupo.
  insert_group: >
    INSERT INTO groups (name, description, category_id, user_admin_id) 
    VALUES ($1, $2, $3, $4) 
    RETURNING group_id;

  # Atualiza informações de um grupo existente
  update_group: >
    UPDATE groups 
    SET
      name = $1,
      description = $2,
      category_id = $3,
      updated_at = CURRENT_TIMESTAMP
    WHERE group_id = $4;

  # Marca um grupo como expirado
  expire_group: >
    UPDATE groups
    SET expired_at = CURRENT_TIMESTAMP 
    WHERE group_id = $1

  # Associa um usuário a um grupo
  insert_user_groups: >
    INSERT INTO group_users (user_id, group_id, verified)
    VALUES ($1, $2, $3)

  # busca associação um usuário a um grupo
  select_user_groups: >
    SELECT *
    FROM group_users
    WHERE user_id = $1
    AND group_id = $2;

  # Remove a associação de um usuário a um grupo por ID grupo
  expire_user_groups: >
    DELETE FROM group_users
    WHERE group_id = $1

  # Remove a associação de um usuário a um grupo por id Usuário e Grupo
  expire_user_groups_member: >
    DELETE FROM group_users
    WHERE user_id = $1 AND group_id = $2; 

  # Verifica se um usuário é membro ativo de um grupo
  select_user_group_member: >
    SELECT * FROM group_users
    WHERE user_id = $1 AND group_id = $2 AND verified = TRUE;

  # Atualiza o Verificado do membro no grupo
  update_user_group_member: >
    UPDATE group_users 
    SET verified = TRUE
    WHERE user_id = $1 AND group_id = $2
    RETURNING *;

  # Deleta a relação de grupo
  delete_user_group_member: >
    DELETE FROM group_users
    WHERE user_id = $1 AND group_id = $2;

  # Verifica se um usuário é membro é convidado de um grupo
  select_user_group_member_not_verified: >
    SELECT * FROM group_users
    WHERE user_id = $1 AND group_id = $2;

  # Inserir
  insert_products: >
    INSERT INTO products
    (name, description, category_id, added_by, quantity, list_id)
    VALUES ($1, $2, $3, $4, $5, $6);

  # Atualizar (painel-criação)
  update_products_by_id: >
    UPDATE products
    SET
      name = $1, description = $2, category_id  = $3,
      quantity = $4, updated_at = CURRENT_TIMESTAMP
    WHERE
      product_id   = $5;

  # Atualizar (painel quem comprou)
  update_products_purchased: >
    UPDATE products
    SET
    purchased_by = $1,
    price = $2
    WHERE product_id = $3;

  # Deletar
  delete_products_by_id: >
    DELETE FROM products
    WHERE product_id = $1;

  #Buscar produtos por id list
  select_products_by_id: >
    SELECT * FROM vw_products
    WHERE list_id = $1;

  #Buscar produtos por seu id
  select_products_by_id_products: >
    SELECT * FROM vw_products
    WHERE product_id = $1;

  # Buscar Total de categorias por ID da lista
  select_total_categories_by_list_id: >
    SELECT 
      category_id,
      category_name AS name,
      total_categoria AS total
    FROM vw_total_categoria_lista
    WHERE list_id = $1

  # Top 3 de categorias gastas por usuário
  select_total_user_categories_by_list_id: >
    SELECT 
      purchased_by AS user_id,
      purchased_name, 
      products_category_id AS category_id, 
      category_name, 
      total_categoria_usuario
    FROM vw_top3_categoria_por_usuario_lista
    WHERE list_id = $1

  # Gastos por usuário
  select_total_users_by_list_id: >
    SELECT
      purchased_by AS user_id,
      purchased_name,
      user_email,
      total_gasto
    FROM vw_total_gasto_por_usuario_lista
    WHERE list_id = $1

  select_invites_by_user_id: >
    SELECT
      *
    FROM vw_invites 
    WHERE user_id = $1

  # Listar produtos de um usuário
  select_products_by_user_id: >
    SELECT
          *
        FROM vw_products
        WHERE purchased_by = $1
        AND list_id = $2;

  #  Buscar todas as listas pelo usuario
  select_list_by_id: >
    SELECT * FROM vw_lists WHERE list_id = $1;
    
  #  Buscar todas as listas pelo grupo
  select_list_by_group_id: >
   SELECT * FROM vw_lists WHERE group_id = $1;

  #  Buscar todas as listas pelo usuario
  select_list_by_user_id: >
   SELECT * FROM vw_lists WHERE created_by = $1;

  # Atualizar uma lista
  update_list_by_id: >
   UPDATE lists
    SET name = $2, 
        description = $3,
        category_id = $4,
        updated_at = CURRENT_TIMESTAMP
    WHERE list_id = $1
    RETURNING *;
  
  # Criar uma nova lista
  insert_list: >
   INSERT INTO lists (name, description, category_id, created_by, group_id)
   VALUES ($1, $2, $3, $4, $5);

  #Deletar uma lista
  delete_list_by_id: >
   DELETE FROM lists WHERE list_id = $1;

  update_user_profile: >
    UPDATE users
    SET name = $1, bio = $2, profile_img_url = $3, updated_at = CURRENT_TIMESTAMP
    WHERE user_id = $4;
